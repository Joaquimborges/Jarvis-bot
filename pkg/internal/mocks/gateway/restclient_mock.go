// Code generated by MockGen. DO NOT EDIT.
// Source: ./rest.go
//
// Generated by this command:
//
//	mockgen -source ./rest.go -destination ../../internal/mocks/gateway/restclient_mock.go -package mocks_gateway
//

// Package mocks_gateway is a generated GoMock package.
package mocks_gateway

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWaitress is a mock of Waitress interface.
type MockWaitress struct {
	ctrl     *gomock.Controller
	recorder *MockWaitressMockRecorder
}

// MockWaitressMockRecorder is the mock recorder for MockWaitress.
type MockWaitressMockRecorder struct {
	mock *MockWaitress
}

// NewMockWaitress creates a new mock instance.
func NewMockWaitress(ctrl *gomock.Controller) *MockWaitress {
	mock := &MockWaitress{ctrl: ctrl}
	mock.recorder = &MockWaitressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaitress) EXPECT() *MockWaitressMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockWaitress) Get(url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWaitressMockRecorder) Get(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWaitress)(nil).Get), url)
}

// Post mocks base method.
func (m *MockWaitress) Post(url string, body any, headers map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, body, headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockWaitressMockRecorder) Post(url, body, headers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockWaitress)(nil).Post), url, body, headers)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source interfaces.go -destination ../../internal/mocks/gateway/expense_repository_mock.go -package mocks_gateway
//

// Package mocks_gateway is a generated GoMock package.
package mocks_gateway

import (
	reflect "reflect"

	entities "github.com/Joaquimborges/jarvis-bot/pkg/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockExpenseCalculator is a mock of ExpenseCalculator interface.
type MockExpenseCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseCalculatorMockRecorder
}

// MockExpenseCalculatorMockRecorder is the mock recorder for MockExpenseCalculator.
type MockExpenseCalculatorMockRecorder struct {
	mock *MockExpenseCalculator
}

// NewMockExpenseCalculator creates a new mock instance.
func NewMockExpenseCalculator(ctrl *gomock.Controller) *MockExpenseCalculator {
	mock := &MockExpenseCalculator{ctrl: ctrl}
	mock.recorder = &MockExpenseCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseCalculator) EXPECT() *MockExpenseCalculatorMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockExpenseCalculator) Save(data *entities.ExpenseCalculatorBody) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockExpenseCalculatorMockRecorder) Save(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockExpenseCalculator)(nil).Save), data)
}

// Select mocks base method.
func (m *MockExpenseCalculator) Select(query string, args ...any) ([]*entities.ExpenseCalculatorBody, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].([]*entities.ExpenseCalculatorBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockExpenseCalculatorMockRecorder) Select(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockExpenseCalculator)(nil).Select), varargs...)
}

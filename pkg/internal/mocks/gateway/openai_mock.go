// Code generated by MockGen. DO NOT EDIT.
// Source: ./gpt.go
//
// Generated by this command:
//
//	mockgen -source ./gpt.go -destination ../../internal/mocks/gateway/openai_mock.go -package mocks_gateway
//

// Package mocks_gateway is a generated GoMock package.
package mocks_gateway

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOpenAI is a mock of OpenAI interface.
type MockOpenAI struct {
	ctrl     *gomock.Controller
	recorder *MockOpenAIMockRecorder
}

// MockOpenAIMockRecorder is the mock recorder for MockOpenAI.
type MockOpenAIMockRecorder struct {
	mock *MockOpenAI
}

// NewMockOpenAI creates a new mock instance.
func NewMockOpenAI(ctrl *gomock.Controller) *MockOpenAI {
	mock := &MockOpenAI{ctrl: ctrl}
	mock.recorder = &MockOpenAIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenAI) EXPECT() *MockOpenAIMockRecorder {
	return m.recorder
}

// GetMessageContext mocks base method.
func (m *MockOpenAI) GetMessageContext(ctx context.Context, query string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageContext", ctx, query)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageContext indicates an expected call of GetMessageContext.
func (mr *MockOpenAIMockRecorder) GetMessageContext(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageContext", reflect.TypeOf((*MockOpenAI)(nil).GetMessageContext), ctx, query)
}
